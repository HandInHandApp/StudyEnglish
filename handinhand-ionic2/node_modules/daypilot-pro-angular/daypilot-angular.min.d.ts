/* Copyright 2005 - ${year} Annpoint, s.r.o.
 Use of this software is subject to license terms.
 http://www.daypilot.org/
 */

type GlobalDate = Date;

export module DayPilot {

    class Scheduler {
        constructor(id: string, options?: any);

        init(): void;
        message(msg: string, options?: { delay?: number, cssClass?: string }): void;
        update(): void;
        dispose(): void;

        autoRefreshPause(): void;
        autoRefreshStart(force: boolean): void;
        clearSelection(): void;
        getScrollX(): number;
        getScrollY(): number;
        hide(): void;
        scrollTo(date: string | DayPilot.Date): void;
        scrollTo(date: string | DayPilot.Date, animated: boolean | number | "fast" | "normal" | "slow" | "linear", position?: "left" | "middle" | "right"): void;
        scrollToResource(id: string): void;
        setScroll(scrollX: number, scrollY: number): void;
        setScrollX(scrollX: number): void;
        setScrollY(scrollY: number): void;
        show(): void;
        uiBlock(): void;
        uiUnblock(): void;
        visibleStart(): DayPilot.Date;
        visibleEnd(): DayPilot.Date;
        getViewPort() : { start: DayPilot.Date, end: DayPilot.Date, resources: string[]};
        multiselect: {
            add(e: DayPilot.Event, dontRedraw?: boolean): void;
            clear(dontRedraw?: boolean): void;
            events(): DayPilot.Event[];
            redraw(): void;
            remove(e: DayPilot.Event, dontRedraw?: boolean): void;
            isSelected(e: DayPilot.Event): boolean;
        };
        setHeight(pixels: number): void;
        events: {
            list: EventData[];

            add(e: DayPilot.Event): void;
            all(): DayPilot.Event[];
            edit(e: DayPilot.Event): void;
            filter(param: any): void;
            find(id: string): DayPilot.Event;
            findRecurrent(masterId: string, time: DayPilot.Date | string): DayPilot.Event;
            load(url: string,
                 success: {(args: { data: any; preventDefault(): void; } ):void},
                 error: {(args: { request: XMLHttpRequest, exception: any; } ):void}
            );
            remove(e: DayPilot.Event): void;
            update(e: DayPilot.Event): void;
        };

        cells: {
            findXy(x: number, y: number): CellArray;
            find(start: DayPilot.Date, resource: string): CellArray;
            findByPixels(x: number, y: number): CellArray;
        };

        links:  {
            list: LinkData[];
        };

        rows: {
            all(): DayPilot.Row[];
            visible(): DayPilot.Row[];
            edit(row: DayPilot.Row): void;
            expand(level?: number): void;
            expandAll(): void;
            filter(param: any): void;
            find(id: string, start?: DayPilot.Date | string): DayPilot.Row;
            headerHide(): void;
            headerShow(): void;
            headerToggle(): void;
            remove(row: DayPilot.Row): void;
            load(url: string,
                 success: {(args: { data: any; preventDefault(): void; } ):void},
                 error: {(args: { request: XMLHttpRequest, exception: any; } ):void}
            );

            selection: {
                add(row: DayPilot.Row): void;
                clear(): void;
                get(): DayPilot.Row[];
                isSelected(row: DayPilot.Row): boolean;
                remove(row: Row): void;
            };

        };

        resources: ResourceData[];

        onAfterEventRender: EventHandler;
        onAfterRender: EventHandler;
        onAfterUpdate: EventHandler;
        onAutoRefresh: EventHandler;
        onBeforeCellExport: EventHandler;
        onBeforeCellRender: EventHandler;
        onBeforeEventExport: EventHandler;
        onBeforeEventRender: EventHandler;
        onBeforeGroupRender: EventHandler;
        onBeforeResHeaderRender: EventHandler;
        onBeforeRowHeaderRender: EventHandler;
        onBeforeRowHeaderExport: EventHandler;
        onBeforeTimeHeaderRender: EventHandler;
        onBeforeTimeHeaderExport: EventHandler;
        onCallBackStart: EventHandler;
        onCallBackEnd: EventHandler;
        onDimensionsChanged: EventHandler;
        onEventClick: EventHandler;
        onEventClicked: EventHandler;
        onEventDelete: EventHandler;
        onEventDeleted: EventHandler;
        onEventDoubleClick: EventHandler;
        onEventDoubleClicked: EventHandler;
        onEventEdit: EventHandler;
        onEventEdited: EventHandler;
        onEventMove: EventHandler;
        onEventMoved: EventHandler;
        onEventMoving: EventHandler;
        onEventResize: EventHandler;
        onEventResized: EventHandler;
        onEventResizing: EventHandler;
        onEventRightClick: EventHandler;
        onEventRightClicked: EventHandler;
        onEventSelect: EventHandler;
        onEventSelected: EventHandler;
        onGridMouseDown: EventHandler;
        onIncludeTimeCell: EventHandler;
        onLoadNode: EventHandler;
        onResourceCollapse: EventHandler;
        onResourceExpand: EventHandler;
        onResourceHeaderClick: EventHandler;
        onResourceHeaderClicked: EventHandler;
        onRowClick: EventHandler;
        onRowClicked: EventHandler;
        onRowDoubleClick: EventHandler;
        onRowDoubleClicked: EventHandler;
        onRowEdit: EventHandler;
        onRowEdited: EventHandler;
        onRowHeaderColumnResized: EventHandler;
        onRowMove: EventHandler;
        onRowMoved: EventHandler;
        onRowMoving: EventHandler;
        onRowSelect: EventHandler;
        onRowSelected: EventHandler;
        onScroll: EventHandler;
        onTimeHeaderClick: EventHandler;
        onTimeHeaderClicked: EventHandler;
        onTimeRangeClick: EventHandler;
        onTimeRangeClicked: EventHandler;
        onTimeRangeDoubleClick: EventHandler;
        onTimeRangeDoubleClicked: EventHandler;
        onTimeRangeRightClick: EventHandler;
        onTimeRangeRightClicked: EventHandler;
        onTimeRangeSelect: EventHandler;
        onTimeRangeSelected: EventHandler;
        onTimeRangeSelecting: EventHandler;

        allowEventOverlap: boolean;
        allowMultiSelect: boolean;
        api: number;
        autoRefreshCommand: string;
        autoRefreshEnabled: boolean;
        autoRefreshInterval: number;
        autoRefreshMaxCount: number;
        autoScroll: "Drag" | "Always" | "Disabled";
        backendUrl: string;
        blockOnCallBack: boolean;
        bubble: DayPilot.Bubble | string;
        businessBeginsHour: number;
        businessEndsHour: number;
        cellBubble: DayPilot.Bubble | string;
        cellDuration: number;
        cellGroupBy: GroupBy;
        cellSweeping: boolean;
        cellSweepingCacheSize: number;
        cellWidth: number;
        cellWidthMin: number;
        cellWidthSpec: "Auto" | "Fixed";
        clientState: any;
        contextMenu: DayPilot.Menu | string;
        contextMenuResource: DayPilot.Menu | string;
        contextMenuSelection: DayPilot.Menu | string;
        cornerHtml: string;
        crosshairColor: string;
        crosshairOpacity: number;
        crosshairType: "Full" | "Header" | "Disabled";
        days: number;
        doubleClickTimeout: number;
        dragOutAllowed: boolean;
        drawBlankCells: boolean;
        durationBarHeight: number;
        durationBarVisible: boolean;
        dynamicEventRendering: boolean;
        dynamicEventRenderingCacheSize: number;
        dynamicEventRenderingCacheSweeping: boolean;
        dynamicEventRenderingMargin: number;
        dynamicLoading: boolean;
        eventClickHandling: "Enabled" | "Disabled" | "CallBack" | "Edit" | "Select" | "ContextMenu" | "Bubble";
        eventDeleteHandling: "Update" | "Disabled" | "CallBack";
        eventDoubleClickHandling: "Enabled" | "Disabled" | "CallBack" | "Edit" | "Select" | "ContextMenu" | "Bubble";
        eventEditHandling: "Disabled" | "Update" | "CallBack";
        eventEndSpec: "DateTime" | "Date";
        eventHeight: number;
        eventHoverHandling: "Bubble" | "Disabled";
        eventMoveHandling: "Update" | "Disabled" | "CallBack" | "Notify";
        eventMoveMargin: number;
        eventMoveToPosition: boolean;
        eventResizeHandling: "Update" | "Disabled" | "CallBack" | "Notify";
        eventResizeMargin: number;
        eventRightClickHandling: "Enabled" | "Disabled" | "CallBack" | "Edit" | "Select" | "ContextMenu" | "Bubble";
        eventSelectHandling: "Disabled" | "Update" | "CallBack";
        floatingEvents: boolean;
        floatingTimeHeaders: boolean;
        groupConcurrentEvents: boolean;
        groupConcurrentEventsLimit: number;
        headerHeight: number;
        height: number;
        heightSpec: "Auto" | "Max" | "Fixed" | "Parent100Pct" | "Max100Pct";
        hideUntilInit: boolean;
        initEventEnabled: boolean;
        layout: "DivBased" | "TableBased";
        loadingLabelText: string;
        loadingLabelVisible: boolean;
        locale: string;
        messageBarPosition: "Top" | "Bottom";
        messageHideAfter: number;
        moveBy: "Full" | "Top" | "Left";
        multiMoveVerticalMode: "Disabled" | "Master" | "All";
        notifyCommit: "Immediate" | "Queue";
        overrideWheelScrolling: boolean;
        progressiveRowRendering: boolean;
        progressiveRowRenderingPreload: number;
        resourceBubble: DayPilot.Bubble;
        resourceCollapseHandling: "Enabled" | "CallBack";
        resourceExpandHandling: "Enabled" | "CallBack";
        rowClickHandling: "Enabled" | "Disabled" | "CallBack" | "Edit" | "Select";
        rowHeaderColumns: { title: string, width?: number}[];
        rowHeaderScrolling: boolean;
        rowHeaderWidth: number;
        rowMarginBottom: number;
        rowMarginTop: number;
        rowMinHeight: number;
        rowMoveHandling: "Disabled" | "Update" | "CallBack" | "Notify";
        scale: "Manual" | "CellDuration" | "Minute" | "Hour" | "Day" | "Week" | "Month" | "Year";
        scrollX: number;
        scrollY: number;
        separators: SeparatorData[];
        showNonBusiness: boolean;
        showToolTip: boolean;
        snapToGrid: boolean;
        sortDirections: SortDirection[];
        startDate: DayPilot.Date | string;
        syncResourceTree: boolean;
        tapAndHoldTimeout: number;
        theme: string;
        timeFormat: "Auto" | "Clock12Hours" | "Clock24Hours";
        timeHeaders: TimeHeaderData[];
        timeline: TimelineData[];
        timeRangeDoubleClickHandling: "Disabled" | "Enabled" | "CallBack";
        timeRangeSelectedHandling: "Enabled" | "Disabled" | "CallBack";
        treeAutoExpand: boolean;
        treeEnabled: boolean;
        treeImageMarginLeft: number;
        treeImageMarginTop: number;
        treeIndent: number;
        treePreventParentUsage: boolean;
        useEventBoxes: "Always" | "Never" | "ShortEventsOnly";
        viewType: "Days" | "Resources" | "Gantt";
        weekStarts: "Auto" | number;
        width: number;
    }

    namespace Scheduler {
        function makeDraggable(options: any): void;
    }

    class Calendar {
        constructor(id: string, options?: any);

        onAfterRender: EventHandler;
        onAfterEventRender: EventHandler;
        onAjaxError: EventHandler;
        onBeforeCellRender: EventHandler;
        onBeforeHeaderRender: EventHandler;
        onBeforeTimeHeaderRender: EventHandler;
        onBeforeEventRender: EventHandler;
        onEventClick: EventHandler;
        onEventClicked: EventHandler;
        onEventDoubleClick: EventHandler;
        onEventDoubleClicked: EventHandler;
        onEventEdit: EventHandler;
        onEventEdited: EventHandler;
        onEventRightClick: EventHandler;
        onEventRightClicked: EventHandler;
        onEventDelete: EventHandler;
        onEventDeleted: EventHandler;
        onEventMove: EventHandler;
        onEventMoved: EventHandler;
        onEventResize: EventHandler;
        onEventResized: EventHandler;
        onEventSelect: EventHandler;
        onEventSelected: EventHandler;
        onHeaderClick: EventHandler;
        onHeaderClicked: EventHandler;
        onTimeRangeSelect: EventHandler;
        onTimeRangeSelected: EventHandler;
        onTimeRangeDoubleClick: EventHandler;
        onTimeRangeDoubleClicked: EventHandler;

        init(): void;
        show(): void;
        hide(): void;
        dispose(): void;
        update(): void;

        events: {
            list: EventData[];

            add(e: DayPilot.Event): void;
            find(id: string): DayPilot.Event;
            findRecurrent(masterId: string, time: DayPilot.Date | string): DayPilot.Event;
            load(url: string,
                 success: {(args: { data: any; preventDefault(): void; } ):void},
                 error: {(args: { request: XMLHttpRequest, exception: any; } ):void}
            );
            remove(e: DayPilot.Event): void;
            update(e: DayPilot.Event): void;
        };

        multiselect: {
            add(e: DayPilot.Event, dontRedraw?: boolean): void;
            clear(dontRedraw?: boolean): void;
            events(): DayPilot.Event[];
            redraw(): void;
            remove(e: DayPilot.Event, dontRedraw?: boolean): void;
        };

        message(msg: string, options?: { delay?: number, cssClass?: string }): void;

        clearSelection(): void;
        getSelection(): { start: DayPilot.Date, end: DayPilot.Date, resource: string};

        visibleStart(): DayPilot.Date;
        visibleEnd(): DayPilot.Date;

        allDayEnd: "DateTime" | "Date";
        allDayEventHeight: number;
        allowMultiSelect: boolean;
        api: number;
        autoRefreshCommand: string;
        autoRefreshEnabled: boolean;
        autoRefreshInterval: number;
        autoRefreshMaxCount: number;
        backendUrl: string;
        bubble: DayPilot.Bubble | string;
        businessBeginsHour: number;
        businessEndsHour: number;
        cellDuration: number;
        cellHeight: number;
        clientState: any;
        columnBubble: DayPilot.Bubble | string;
        columnMarginRight: number;
        columns: CalendarColumnData[];
        contextMenu: DayPilot.Menu | string;
        contextMenuSelection: DayPilot.Menu | string;
        cornerHtml: string;
        crosshairColor: string;
        crosshairOpacity: number;
        crosshairType: "Header" | "Full";
        dayBeginsHour: number;
        dayEndsHour: number;
        days: number;
        doubleClickTimeout: number;
        durationBarVisible: boolean;
        durationBarWidth: number;
        eventArrangement: "SideBySide" | "Cascade" | "Full";
        eventClickHandling: "Enabled" | "Disabled" | "CallBack" | "Edit" | "Select" | "ContextMenu" | "Bubble";
        eventDeleteHandling: "Update" | "Disabled" | "CallBack";
        eventDoubleClickHandling: "Enabled" | "Disabled" | "CallBack" | "Edit" | "Select" | "Bubble";
        eventEditHandling: "Update" | "CallBack";
        eventHoverHandling: "Bubble" | "Disabled";
        eventMoveHandling: "Update" | "CallBack" | "Notify" | "Disabled";
        eventResizeHandling: "Update" | "CallBack" | "Notify" | "Disabled";
        eventRightClickHandling: "ContextMenu" | "Disabled" | "CallBack" | "Bubble";
        eventSelectHandling: "Update" | "CallBack" | "Disabled";
        eventTapAndHoldHandling: "Move" | "ContextMenu";
        headerClickHandling: "Enabled" | "CallBack";
        headerDateFormat: string;
        headerHeight: number;
        headerLevels: number;
        height: number;
        heightSpec: "BusinessHours" | "BusinessHoursNoScroll" | "Fixed" | "Auto";
        hideFreeCells: boolean;
        hideUntilInit: boolean;
        hourWidth: number;
        initScrollPos: number;
        loadingLabelText: string;
        loadingLabelVisible: boolean;
        locale: string;
        messageHideAfter: number;
        moveBy: "Full" | "Left" | "Top" | "Disabled" | "None";
        notifyCommit: "Immediate" | "Queue";
        rtl: boolean;
        showAllDayEvents: boolean;
        showAllDayEventStartEnd: boolean;
        showCurrentTime: boolean;
        showCurrentTimeMode: "Day" | "Full";
        showCurrentTimeOffset: number;
        showHeader: boolean;
        showHours: boolean;
        showToolTip: boolean;
        sortDirections: SortDirection[];
        startDate: DayPilot.Date | string;
        timeFormat: "Auto" | "Clock12Hours" | "Clock24Hours";
        timeHeaderCellDuration: number;
        timeRangeDoubleClickHandling: "Enabled" | "CallBack";
        timeRangeSelectedHandling: "Enabled" | "Disabled" | "CallBack";
        useEventBoxes: "Always" | "Never" | "ShortEventsOnly";
        viewType: "Days" | "Resources";
        width: string;
    }

    class Month {
        constructor(id: string, options?: any);

        onAjaxError: EventHandler;
        onAfterEventRender: EventHandler;
        onAfterRender: EventHandler;
        onBeforeCellRender: EventHandler;
        onBeforeEventRender: EventHandler;
        onBeforeHeaderRender: EventHandler;
        onEventClick: EventHandler;
        onEventClicked: EventHandler;
        onEventDoubleClick: EventHandler;
        onEventDoubleClicked: EventHandler;
        onEventSelect: EventHandler;
        onEventSelected: EventHandler;
        onEventRightClick: EventHandler;
        onEventRightClicked: EventHandler;
        onEventMove: EventHandler;
        onEventMoved: EventHandler;
        onEventResize: EventHandler;
        onEventResized: EventHandler;
        onTimeRangeSelect: EventHandler;
        onTimeRangeSelected: EventHandler;
        onHeaderClick: EventHandler;
        onHeaderClicked: EventHandler;
        onTimeRangeDoubleClick: EventHandler;
        onTimeRangeDoubleClicked: EventHandler;

        allowMultiSelect: boolean;
        autoRefreshEnabled: boolean;
        autoRefreshCommand: string;
        autoRefreshInterval: number;
        autoRefreshMaxCount: number;
        backendUrl: string;
        bubble: DayPilot.Bubble | string;
        cellHeaderHeight: number;
        cellHeight: number;
        cellMarginBottom: number;
        cellMode: boolean;
        clientState: any;
        contextMenu: DayPilot.Menu | string;
        eventClickHandling: "Enabled" | "Disabled" | "CallBack" | "Select" | "ContextMenu" | "Bubble";
        eventDoubleClickHandling: "Enabled" | "Disabled" | "CallBack" | "Select" | "Bubble";
        eventEndTime: boolean;
        eventHeight: number;
        eventMoveHandling: "Update" | "CallBack" | "Notify" | "Disabled";
        eventMoveToPosition: boolean;
        eventResizeHandling: "Update" | "CallBack" | "Notify" | "Disabled";
        eventRightClickHandling: "ContextMenu" | "Enabled" | "Disabled" | "CallBack" | "Bubble";
        eventSelectHandling: "Update" | "CallBack" | "Disabled";
        eventStartTime: boolean;
        events : {
            list: EventData[];
            add(e: DayPilot.Event): void;
            find(id: string): DayPilot.Event;
            findRecurrent(masterId: string, time: DayPilot.Date | string): DayPilot.Event;
            forRange(start: DayPilot.Date | string, end: DayPilot.Date | string): DayPilot.Event[];
            remove(e: DayPilot.Event): void;
            update(e: DayPilot.Event): void;
        };
        headerClickHandling: "Enabled" | "Disabled" | "CallBack";
        headerHeight: number;
        hideUntilInit: boolean;
        lineSpace: number;
        locale: string;
        messageHideAfter: number;
        notifyCommit: "Immediate" | "Queue";
        showWeekend: boolean;
        showToolTip: boolean;
        startDate: DayPilot.Date | string;
        theme: string;
        timeFormat: "Auto" | "Clock12Hours" | "Clock24Hours";
        timeRangeDoubleClickHandling: "Enabled" | "Disabled" | "CallBack";
        timeRangeSelectedHandling: "Enabled" | "Disabled" | "CallBack";
        viewType: "Month" | "Weeks";
        weekStarts: "Auto" | number;
        weeks: number;
        width: string;


        clearSelection(): void;
        dispose(): void;
        hide(): void;
        init(): void;

        message(msg: string, options?: { delay?: number, cssClass?: string }): void;

        multiselect: {
            add(e: DayPilot.Event, dontRedraw?: boolean);
            clear(dontRedraw?: boolean);
            events(): DayPilot.Event[];
            redraw(): void;
            remove(e: DayPilot.Event): void;
        };

        show(): void;
        update(): void;
        visibleStart(): DayPilot.Date;
        visibleEnd(): DayPilot.Date;
    }

    class Kanban {
        constructor(id: string, options?: any);

        onCardClick: EventHandler;
        onCardClicked: EventHandler;
        onCardDelete: EventHandler;
        onCardDeleted: EventHandler;
        onCardMove: EventHandler;
        onCardMoved: EventHandler;
        onColumnMove: EventHandler;
        onColumnMoved: EventHandler;
        onHeightChanged: EventHandler;
        onSwimlaneMove: EventHandler;
        onSwimlaneMoved: EventHandler;

        barWidth: number;
        cardDeleteHandling: "Disabled" | "Update";
        cardMarginBottom: number;
        cardMarginLeft: number;
        cardMarginRight: number;
        cardMoveHandling: "Update" | "Disabled";
        cards: {
            list: CardData[];
            add(c: DayPilot.Card): void;
            remove(c: DayPilot.Card): void;
            update(c: DayPilot.Card): void;
        };
        cellMarginBottom: number;
        cellMarginTop: number;
        columnHeaderHeight: number;
        columnMoveHandling: "Disabled" | "Update";
        columns: {
            list: KanbanColumnData[];
        };
        crosshairColor: string;
        height: number;
        heightSpec: "Auto" | "Max" | "Fixed" | "Parent100Pct";
        rowMinHeight: number;
        swimlaneCollapsingEnabled: boolean;
        swimlaneHeaderWidth: number;
        swimlaneMoveHandling: "Disabled" | "Update";
        swimlanes : {
            list: SwimlaneData[];
        };
        theme: string;
        visible: boolean;


        hide(): void;
        init(): void;
        dispose(): void;
        message(msg: string, options?: { delay?: number, cssClass?: string }): void;
        show(): void;
        update(): void;
    }

    class Gantt {
        constructor(id: string, options?: any);

        onAfterRender: EventHandler;
        onBeforeCellRender: EventHandler;
        onBeforeRowHeaderRender: EventHandler;
        onBeforeTaskRender: EventHandler;
        onBeforeTimeHeaderRender: EventHandler;
        onColumnResized: EventHandler;
        onLinkCreate: EventHandler;
        onLinkCreated: EventHandler;
        onRowClick: EventHandler;
        onRowClicked: EventHandler;
        onRowDoubleClick: EventHandler;
        onRowDoubleClicked: EventHandler;
        onRowEdit: EventHandler;
        onRowEdited: EventHandler;
        onRowMove: EventHandler;
        onRowMoved: EventHandler;
        onRowMoving: EventHandler;
        onRowSelect: EventHandler;
        onRowSelected: EventHandler;
        onTaskClick: EventHandler;
        onTaskClicked: EventHandler;
        onTaskDoubleClick: EventHandler;
        onTaskDoubleClicked: EventHandler;
        onTaskMove: EventHandler;
        onTaskMoved: EventHandler;
        onTaskMoving: EventHandler;
        onTaskResize: EventHandler;
        onTaskResized: EventHandler;
        onTaskResizing: EventHandler;
        onTaskRightClick: EventHandler;
        onTaskRightClicked: EventHandler;

        commandCallBack(command: string, data?: any): void;
        init(): void;
        dispose(): void;
        links: {
            list: LinkData[];
            add(link: DayPilot.Link): void;
            find(id: string): DayPilot.Link;
            remove(link: DayPilot.Link): void;
        };
        message(html: string): void;
        rows: {
            selection: {
                add(task: DayPilot.Task): void;
                clear(): void;
                get(): DayPilot.Task[];
            };
        };
        scrollTo(date: DayPilot.Date, animated?: "fast" | "normal" | "slow" | "linear" | number, position?: "left" | "middle" | "right"): void;
        scrollTo(date: string, animated?: "fast" | "normal" | "slow" | "linear" | number, position?: "left" | "middle" | "right"): void;
        scrollTo(pixels: number, animated?: "fast" | "normal" | "slow" | "linear" | number, position?: "left" | "middle" | "right"): void;
        setHeight(pixels: number): void;
        startDate: DayPilot.Date | string;
        days: number;
        tasks: {
            list: TaskData[];
            add(task: DayPilot.Task): void;
            find(id: string): DayPilot.Task;
            remove(task: DayPilot.Task): void;
            update(task: DayPilot.Task): void;
        };
        update(): void;
    }

    class Navigator {
        constructor(id: string, options?: any);

        onAjaxError: EventHandler;
        onBeforeCellRender: EventHandler;
        onTimeRangeSelect: EventHandler;
        onTimeRangeSelected: EventHandler;
        onVisibleRangeChange: EventHandler;
        onVisibleRangeChanged: EventHandler;

        bound: string;
        cellHeight: number;
        cellWidth: number;
        command: string;
        dayHeaderHeight: number;
        events: {
            list: EventDataShort[];
        };
        locale: string;
        orientation: "Vertical" | "Horizontal";
        rowsPerMonth: "Auto" | "Six";
        selectionDay: DayPilot.Date;
        selectionEnd: DayPilot.Date;
        selectionStart: DayPilot.Date;
        selectMode: "day" | "week" | "month" | "none";
        showMonths: number;
        showWeekNumbers: boolean;
        skipMonths: number;
        startDate: DayPilot.Date | string;
        theme: string;
        titleHeight: number;
        weekStarts: "Auto" | number;
        weekNumberAlgorithm: "Auto" | "US" | "ISO8601";
        timeRangeSelectedHandling: "Bind" | "None";
        visibleRangeChangedHandling: "Enabled" | "Disabled" | "CallBack";

        init(): void;
        dispose(): void;
        update(): void;
        select(date: DayPilot.Date | string): void;
        hide(): void;
        show(): void;
        visibleEnd(): DayPilot.Date;
        visibleStart(): DayPilot.Date;
    }

    class Bubble {
        constructor(options?: any);

        onLoad: EventHandler;

        showEvent(e: DayPilot.Event): void;
        showHtml(html: string, div?: HTMLElement): void;

        animated: boolean;
        animation: "fast" | "slow" | "jump";
        hideAfter: number;
        loadingText: number;
        position: "EventTop" | "Mouse";
        showAfter: number;
        showLoadingLabel: boolean;
        theme: string;
        zIndex: number;
    }

    class Locale {
        constructor(id: string, properties: {
            dayNames: string[];
            dayNamesShort: string[];
            monthNames: string[];
            timePattern: string;
            datePattern: string;
            dateTimePattern: string;
            timeFormat: "Clock12Hours" | "Clock24Hours";
            weekStarts: number;
        });

        datePattern: string;
        dateTimePattern: string;
        dayNames: string[];
        dayNamesShort: string[];
        monthNames: string[];
        monthNamesShort: string[];
        timeFormat: "Clock12Hours" | "Clock24Hours";
        timePattern: string;
        weekStarts: number;
    }

    namespace Locale {
        function register(locale: DayPilot.Locale): void;
    }

    class Menu {
        constructor(options?: {
            hideOnMouseOut?: boolean;
            items?: MenuItemData[];
            menuTitle?: string;
            onShow?: EventHandler;
            showMenuTitle?: boolean;
            zIndex?: number;
            theme?: string;
        });

        //className: string;
        hideOnMouseOut: boolean;
        items: MenuItemData[];
        menuTitle: string;
        showMenuTitle: boolean;
        zIndex: number;
        theme: string;

        show(target?: any);
    }

    class MenuBar {
        constructor(id: string, options?: any);
        items: any[];
        init(): void;
    }

    class Date {
        constructor(str?: string | DayPilot.Date);
        constructor(date: GlobalDate, isLocal?: boolean);

        addDays(days: number): DayPilot.Date;
        addHours(hours: number): DayPilot.Date;
        addMilliseconds(millis: number): DayPilot.Date;
        addMinutes(minutes: number): DayPilot.Date;
        addMonths(months: number): DayPilot.Date;
        addSeconds(seconds: number): DayPilot.Date;
        addTime(ticks: number): DayPilot.Date;
        addTime(duration: DayPilot.Duration): DayPilot.Date;
        addYears(years: number): DayPilot.Date;
        dayOfWeek(): number;
        dayOfYear(): number;
        daysInMonth(): number;
        daysInYear(): number;
        equals(another: DayPilot.Date): boolean;
        firstDayOfMonth(): DayPilot.Date;
        firstDayOfWeek(): DayPilot.Date;
        firstDayOfYear(): DayPilot.Date;
        getDatePart(): DayPilot.Date;
        getDay(): number;
        getDayOfWeek(): number;
        getYear(): number;
        getHours(): number;
        getMilliseconds(): number;
        getMinutes(): number;
        getMonth(): number;
        getSeconds(): number;
        getTime(): number;
        getTimePart(): number;
        getTotalTicks(): number;
        getYear(): number;
        lastDayOfMonth(): DayPilot.Date;
        toDateLocal(): GlobalDate;
        toString(pattern?: string, locale?: string | DayPilot.Locale): string;
        toStringSortable(): string;
        weekNumber(): number;
        weekNumberISO(): number;
    }

    namespace Date {
        function today(): DayPilot.Date;
        function fromYearMonthDay(year, month, day): DayPilot.Date;
        function parse(input: string, pattern: string, locale?: string | DayPilot.Locale): DayPilot.Date;
        function today(): DayPilot.Date;
        namespace Cache {
            function clear(): void;
        }
    }

    namespace Modal {
        function prompt(message: string, defaultValue?: string, options?: any) : Promise;
        function alert(message: string, options?: any) : Promise;
        function confirm(message: string, options?: any) : Promise;
    }

    class Promise {
        constructor(f: (onFulfilled: (...args: any[]) => void, onRejected?: (...args: any[]) => void) => void);
        then(onFulfilled: (...args: any[]) => void, onRejected?: (...args: any[]) => void): Promise;
        catch(onRejected: (...args: any[]) => void): Promise;
    }

    class Duration {

        constructor(ticks: number);
        constructor(start: DayPilot.Date, end: DayPilot.Date);

        ticks: number;
        toString(pattern?:string): string;

        totalSeconds(): number;
        totalMinutes(): number;
        totalHours(): number;
        totalDays(): number;

        milliseconds(): number;
        seconds(): number;
        minutes(): number;
        hours(): number;
        days(): number;
    }

    namespace Duration {
        function weeks(i: number): DayPilot.Duration;
        function days(i: number): DayPilot.Duration;
        function hours(i: number): DayPilot.Duration;
        function minutes(i: number): DayPilot.Duration;
        function seconds(i: number): DayPilot.Duration;
    }

    class Event {
        constructor(data: EventData);
        data: any;

        start(): DayPilot.Date;
        start(newStart: DayPilot.Date): void;

        end(): DayPilot.Date;
        end(newEnd: DayPilot.Date): void;

        id(): string;

        text(): string;
        text(newText: string): void;

        resource(): string;
        resource(newResource: string): void;

        duration(): DayPilot.Duration;
    }

    class Task {
        constructor(data: TaskData);

        data: TaskData;

        id(): string | number;
        id(newId: string): void;

        text(): string;
        text(newText: string): void;

        start(): DayPilot.Date;
        start(newStart: DayPilot.Date | string): void;

        end(): DayPilot.Date;
        end(newEnd: DayPilot.Date | string): void;

        complete(): number;
        complete(newComplete: number): void;

        type(): TaskType;
        type(newType: TaskType): void;

        children(): DayPilot.Task[];

        row: {
            expand(): void;
            expanded(): boolean;
            collapse(): void;
            toggle(): void;
        }
    }

    class Card {
        constructor(data: CardData);
        data: CardData;
    }

    class Link {
        constructor(data: LinkData);
        data: LinkData;
    }

    class Row {
        addClass(className: string): void;
        children(): DayPilot.Row[];
        parent(): DayPilot.Row;
        remove(): void;
        collapse(): void;
        column(i): RowHeaderColumn;
        expand(): void;
        removeClass(className: string): void;
        toggle(): void;
        events: {
            all(): DayPilot.Event[];
            totalDuration(): number;
        };
        cells: {
            all();
        };
        groups: {
            all(): EventGroup[];
            collapseAll(): void;
            collapsed(): EventGroup[];
            expandAll(): void;
            expanded(): EventGroup[];
        };

        id: string;
        name: string;
        start: DayPilot.Date;
        data: any;
    }

    interface CardData {
        id: string | number;
        name: string;
        text?: string;
        html?: string;
        column: string | number;
        swimlane?: string | number;
        barColor?: string;
    }

    interface KanbanColumnData {
        id: string | number;
        name: string;
        barColor?: string;
    }

    interface SwimlaneData {
        id: string | number;
        name: string;
        collapsed?: boolean;
    }

    interface RowHeaderColumn {
        html(newHtml?: string): string | void;
    }

    interface EventGroup {
        expand(): void;
        collapse(): void;
    }

    interface CalendarColumnData {
        name: string;
        id?: string;
        start?: DayPilot.Date | string;
        html?: string;
        toolTip?: string;
        children?: CalendarColumnData[];
    }

    type GroupBy = "Hour" | "Day" | "Week" | "Month"  | "Quarter" | "Year" | "Cell" | "None";
    type SortDirection = "asc" | "desc";
    type TaskType = "Task" | "Milestone" | "Group";
    type LinkType = "FinishToStart" | "FinishToFinish" | "StartToStart" | "StartToFinish";

    interface TimelineData {
        start: DayPilot.Date | string;
        end: DayPilot.Date | string;
        width?: number;
    }

    interface TimeHeaderData {
        groupBy: GroupBy;
        format?: string;
    }

    interface MenuItemData {
        text: string;
        href?: string;
        onclick?: {()};
        onClick?: EventHandler;
        command?: string;
        action?: "CallBack" | "PostBack";
        disabled?: boolean;
        image?: string;
        cssClass?: string;
    }

    interface EventHandler {
        (args?: any): void;
    }

    interface SeparatorData {
        location: DayPilot.Date | string;
        color?: string;
        layer?: "AboveEvents" | "BelowEvents";
        opacity?: number;
        width?: number;
    }

    interface CellArray extends Array<Cell> {
        addClass(className: string): CellArray;
        removeClass(className: string): CellArray;
        html(html: string): CellArray;
        invalidate(): CellArray;
    }

    interface Cell {
        start: DayPilot.Date;
        end: DayPilot.Date;
        resource: string;
        isParent: boolean;
        update(): void;
        utilization(name?: string): number;
        events(): DayPilot.Event[];
        div: HTMLElement;
        properties: any;
    }

    interface EventDataShort {
        start: string | DayPilot.Date;
        end: string | DayPilot.Date;
    }

    interface EventData {
        start: string | DayPilot.Date;
        end: string | DayPilot.Date;
        id: string | number;
        text: string;
        resource?: string | number;

        areas?: AreaData[];
        backColor?: string;
        backImage?: string;
        backRepeat?: string;
        borderColor?: string;
        bubbleHtml?: string;
        clickDisabled?: boolean;
        contextMenu?: DayPilot.Menu | string;
        cssClass?: string;
        deleteDisabled?: boolean;
        doubleClickDisabled?: boolean;
        fontColor?: string;
        hidden?: boolean;
        html?: string;
        moveDisabled?: boolean;
        recurrent?: boolean;
        recurrentMasterId?: boolean;
        resizeDisabled?: boolean;
        rightClickDisabled?: boolean;
        sort?: string[];
        tags?: any;
        toolTip?: string;

        // scheduler
        barBackColor?: string;
        barColor?: string;
        barHidden?: boolean;
        complete?: number;
        height?: number;
        moveVDisabled?: boolean;
        moveHDisabled?: boolean;
    }

    interface LinkData {
        from: string;
        to: string;
        id?: string;
        type?: LinkType;
        width?: number;
        color?: string;
        style?: string;
        cssClass?: string;
        layer?: "Above" | "Below";
    }

    interface TaskData {
        id: string;
        text: string;
        start: DayPilot.Date | string;
        end?: DayPilot.Date | string;
        type?: TaskType;
        complete?: number;
        children?: TaskData[];
        tags: any;

        box?: {
            areas?: AreaData[];
            backColor?: string;
            backImage?: string;
            backRepeat?: string;
            barBackColor?: string;
            barColor?: string;
            barHidden?: boolean;
            bubbleHtml?: string;
            clickDisabled?: boolean;
            contextMenu: DayPilot.Menu | string;
            cssClass?: string;
            doubleClickDisabled?: boolean;
            html?: string;
            htmlLeft?: string;
            htmlRight?: string;
            moveDisabled?: boolean;
            resizeDisabled?: boolean;
            rightClickDisabled?: boolean;
            toolTip?: string;
        };

        row?: {
            html?: string;
            hidden?: boolean;
            areas?: AreaData[];
            toolTip?: string;
            backColor?: string;
            cssClass?: string;
            contextMenu?: DayPilot.Menu | string;
            collapsed?: boolean;
            marginBottom?: number;
            minHeight?: number;

        };
    }

    interface ResourceData {
        name: string;
        id: string | number;

        html?: string;
        areas?: AreaData[];
        toolTip?: string;
        backColor?: string;
        cssClass?: string;
        contextMenu?: Menu | string;
        dynamicChildren?: boolean;
        expanded?: boolean;
        children?: ResourceData[];
        columns?: {html?: string; cssClass?: string; backColor?: string}[];
        eventHeight?:number;
    }

    interface AreaData {
        width?: number;
        height?: number;
        css?: string;
        right?: number;
        top?: number;
        left?: number;
        bottom?: number;
        visibility?: "Hover" | "Visible";
        html?: string;
        id?: string | number;
        start?: Date | string;
        end?: Date | string;
        menu: Menu | string;
        js: {(args)} | string;
        action: "None" | "JavaScript" | "ContextMenu" | "HoverMenu" | "ResizeEnd" | "ResizeStart" | "Move" | "Bubble";
    }

    function guid(): string;


    /**
     * Angular 2 components.
     */
    namespace Angular {

        /**
         * DayPilot Scheduler Angular 2 component.
         */
        class Scheduler {
            constructor();

            events: EventData[];
            config: any;
            control: DayPilot.Scheduler;
        }

        /**
         * DayPilot Gantt Angular 2 component.
         */
        class Gantt {
            constructor();

            config: any;
            control: DayPilot.Gantt;
        }

        /**
         * DayPilot Calendar Angular 2 component.
         */
        class Calendar {
            constructor();

            events: EventData[];
            config: any;
            control: DayPilot.Calendar;
        }

        /**
         * DayPilot Month Angular 2 component.
         */
        class Month {
            constructor();

            events: EventData[];
            config: any;
            control: DayPilot.Month;
        }

        /**
         * DayPilot Kanban Angular 2 component.
         */
        class Kanban {
            constructor();

            config: any;
            control: DayPilot.Kanban;
        }

        class Navigator {
            constructor();

            events: EventDataShort[];
            config: any;
            control: DayPilot.Navigator;

            date: Date | string;
        }

        class Modal {
            constructor();

            autoFocus: boolean;

            show(): void;
            hide(result?:any): void;
        }

    }
}
/* Copyright 2005 - ${year} Annpoint, s.r.o.
 Use of this software is subject to license terms.
 http://www.daypilot.org/
 */

//noinspection TypeScriptCheckImport
import { AfterViewInit, EventEmitter, OnInit, DoCheck, ElementRef, OnDestroy } from "@angular/core";

export declare class DayPilotSchedulerComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _requestViewChange;
    private _eventDiff;
    private _visibleRange;
    private _hashOptions;
    private _id;
    control: DayPilot.Scheduler;
    viewChange: EventEmitter<DayPilot.Date>;
    events: DayPilot.EventData[];
    config: any;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    private updateEvents();
}
export declare class DayPilotCalendarComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _requestViewChange;
    private _hashOptions;
    private _hashEvents;
    private _id;
    control: DayPilot.Calendar;
    viewChange: EventEmitter<DayPilot.Date>;
    events: DayPilot.EventData[];
    config: any;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    private updateEvents();
}
export declare class DayPilotGanttComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _hashOptions;
    private _id;
    control: DayPilot.Gantt;
    config: any;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
}
export declare class DayPilotMonthComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _hashOptions;
    private _hashEvents;
    private _id;
    control: DayPilot.Month;
    events: DayPilot.EventData[];
    config: any;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    private updateEvents();
}
export declare class DayPilotKanbanComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _hashOptions;
    private _id;
    control: DayPilot.Kanban;
    config: any;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
}
export declare class DayPilotNavigatorComponent implements OnInit, OnDestroy, AfterViewInit, DoCheck {
    private _requestUpdate;
    private _hashOptions;
    private _hashDate;
    private _hashEvents;
    private _onTrs;
    date: DayPilot.Date;
    events: DayPilot.EventDataShort[];
    config: any;
    dateChange: EventEmitter<DayPilot.Date>;
    private _id;
    control: DayPilot.Navigator;
    readonly id: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    private dispose();
    private updateOptions();
    private updateEvents();
}
export declare class DayPilotModalComponent implements OnInit {
    private element;
    autoFocus: boolean;
    close: EventEmitter<any>;
    private _visibility;
    constructor(element: ElementRef);
    readonly visible: boolean;
    ngOnInit(): void;
    show(): void;
    hide(result?: any): void;
}
export declare class DayPilotModule {
}
